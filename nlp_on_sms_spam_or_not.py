# -*- coding: utf-8 -*-
"""NLP on SMS spam or not.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q3a5aekJErNJsMdGZjGwjiHLpJ1bNqds
"""

import pandas as pd 
import numpy as np
from matplotlib import pyplot as plt

dataset = pd.read_csv('/content/SMS_train.csv',encoding = 'unicode_escape')
dataset.head(10)

data = dataset[['Message_body','Label']]
data.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data['Label'] = le.fit_transform(data['Label'])

data.head()

len(data['Message_body'])

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
for i in range(0, 957):
  review = re.sub('[^a-zA-Z]', ' ', data['Message_body'][i])
  review = review.lower()
  review = review.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
  review = ' '.join(review)
  corpus.append(review)

print(corpus)

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=2400)
X = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, -1].values

print(len(x[0]))

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(x, y)

test = pd.read_csv('/content/SMS_test.csv' , encoding= 'unicode_escape')
test['Label'] = le.fit_transform(test['Label'])
test.head()

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corp= []
for i in range(0, len(test)):
  reviews = re.sub('[^a-zA-Z]', ' ', test['Message_body'][i])
  reviews = reviews.lower()
  reviews = reviews.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  reviews = [ps.stem(word) for word in reviews if not word in set(all_stopwords)]
  reviews = ' '.join(reviews)
  corp.append(reviews)

len(test)

X = cv.fit_transform(corp).toarray()
Y = test.iloc[:, -1].values

classifier.fit(X, Y)
y_pred = classifier.predict(X)
print(np.concatenate((y_pred.reshape(len(y_pred),1), Y.reshape(len(Y),1)),1))

from sklearn.metrics import accuracy_score, confusion_matrix
cm = confusion_matrix(Y , y_pred)
print(cm)
print(accuracy_score(Y , y_pred))

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from wordcloud import WordCloud
Text = " ".join(cat.split()[1] for cat in test.Message_body)
# Creating word_cloud with text as argument in .generate() method
wordcloud = WordCloud(collocations = False, background_color = 'white').generate(Text)
# Display the generated Word Cloud
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()